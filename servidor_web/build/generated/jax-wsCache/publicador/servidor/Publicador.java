
package servidor;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.FaultAction;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-1b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Publicador", targetNamespace = "http://servidor/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    net.java.dev.jaxb.array.ObjectFactory.class,
    servidor.ObjectFactory.class
})
public interface Publicador {


    /**
     * 
     * @return
     *     returns servidor.DataColeccionString
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarClientesRequest", output = "http://servidor/Publicador/listarClientesResponse")
    public DataColeccionString listarClientes();

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataLista
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/darInfoDefectoRequest", output = "http://servidor/Publicador/darInfoDefectoResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/darInfoDefecto/Fault/ClienteInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/darInfoDefecto/Fault/ListaInexistenteException")
    })
    public DataLista darInfoDefecto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws CorreoRepetidoException_Exception
     * @throws FormatoIncorrectoException_Exception
     * @throws NickRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/altaClienteRequest", output = "http://servidor/Publicador/altaClienteResponse", fault = {
        @FaultAction(className = NickRepetidoException_Exception.class, value = "http://servidor/Publicador/altaCliente/Fault/NickRepetidoException"),
        @FaultAction(className = CorreoRepetidoException_Exception.class, value = "http://servidor/Publicador/altaCliente/Fault/CorreoRepetidoException"),
        @FaultAction(className = FormatoIncorrectoException_Exception.class, value = "http://servidor/Publicador/altaCliente/Fault/FormatoIncorrectoException")
    })
    public void altaCliente(
        @WebParam(name = "arg0", partName = "arg0")
        DataCliente arg0)
        throws CorreoRepetidoException_Exception, FormatoIncorrectoException_Exception, NickRepetidoException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws CorreoRepetidoException_Exception
     * @throws FormatoIncorrectoException_Exception
     * @throws NickRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/altaArtistaRequest", output = "http://servidor/Publicador/altaArtistaResponse", fault = {
        @FaultAction(className = NickRepetidoException_Exception.class, value = "http://servidor/Publicador/altaArtista/Fault/NickRepetidoException"),
        @FaultAction(className = CorreoRepetidoException_Exception.class, value = "http://servidor/Publicador/altaArtista/Fault/CorreoRepetidoException"),
        @FaultAction(className = FormatoIncorrectoException_Exception.class, value = "http://servidor/Publicador/altaArtista/Fault/FormatoIncorrectoException")
    })
    public void altaArtista(
        @WebParam(name = "arg0", partName = "arg0")
        DataArtista arg0)
        throws CorreoRepetidoException_Exception, FormatoIncorrectoException_Exception, NickRepetidoException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws SeguidorInexistenteException_Exception
     * @throws SeguidoRepetidoException_Exception
     * @throws AutoSeguirseException_Exception
     * @throws SeguidoInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/altaSeguirRequest", output = "http://servidor/Publicador/altaSeguirResponse", fault = {
        @FaultAction(className = SeguidorInexistenteException_Exception.class, value = "http://servidor/Publicador/altaSeguir/Fault/SeguidorInexistenteException"),
        @FaultAction(className = SeguidoInexistenteException_Exception.class, value = "http://servidor/Publicador/altaSeguir/Fault/SeguidoInexistenteException"),
        @FaultAction(className = SeguidoRepetidoException_Exception.class, value = "http://servidor/Publicador/altaSeguir/Fault/SeguidoRepetidoException"),
        @FaultAction(className = AutoSeguirseException_Exception.class, value = "http://servidor/Publicador/altaSeguir/Fault/AutoSeguirseException")
    })
    public void altaSeguir(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws AutoSeguirseException_Exception, SeguidoInexistenteException_Exception, SeguidoRepetidoException_Exception, SeguidorInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws ListaRepetidaException_Exception
     * @throws CampoVacioException_Exception
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/altaListaParticularRequest", output = "http://servidor/Publicador/altaListaParticularResponse", fault = {
        @FaultAction(className = ListaRepetidaException_Exception.class, value = "http://servidor/Publicador/altaListaParticular/Fault/ListaRepetidaException"),
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/altaListaParticular/Fault/ClienteInexistenteException"),
        @FaultAction(className = CampoVacioException_Exception.class, value = "http://servidor/Publicador/altaListaParticular/Fault/CampoVacioException")
    })
    public void altaListaParticular(
        @WebParam(name = "arg0", partName = "arg0")
        DataParticular arg0)
        throws CampoVacioException_Exception, ClienteInexistenteException_Exception, ListaRepetidaException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws YaPublicaException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/publicarListaRequest", output = "http://servidor/Publicador/publicarListaResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/publicarLista/Fault/ClienteInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/publicarLista/Fault/ListaInexistenteException"),
        @FaultAction(className = YaPublicaException_Exception.class, value = "http://servidor/Publicador/publicarLista/Fault/YaPublicaException")
    })
    public void publicarLista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ClienteInexistenteException_Exception, ListaInexistenteException_Exception, YaPublicaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionString
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarListasDeClienteRequest", output = "http://servidor/Publicador/listarListasDeClienteResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/listarListasDeCliente/Fault/ClienteInexistenteException")
    })
    public DataColeccionString listarListasDeCliente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionString
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarArtistasRequest", output = "http://servidor/Publicador/listarArtistasResponse")
    public DataColeccionString listarArtistas();

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataArtistaExt
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaArtistaRequest", output = "http://servidor/Publicador/consultaArtistaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaArtista/Fault/ArtistaInexistenteException")
    })
    public DataArtistaExt consultaArtista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionString
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarListasPrivadasDeClienteRequest", output = "http://servidor/Publicador/listarListasPrivadasDeClienteResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/listarListasPrivadasDeCliente/Fault/ClienteInexistenteException")
    })
    public DataColeccionString listarListasPrivadasDeCliente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionString
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarAlbumesDeArtistaRequest", output = "http://servidor/Publicador/listarAlbumesDeArtistaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/listarAlbumesDeArtista/Fault/ArtistaInexistenteException")
    })
    public DataColeccionString listarAlbumesDeArtista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns servidor.DataAlbumExt
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaAlbumRequest", output = "http://servidor/Publicador/consultaAlbumResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaAlbum/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaAlbum/Fault/AlbumInexistenteException")
    })
    public DataAlbumExt consultaAlbum(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionString
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarListasPublicasDeClienteRequest", output = "http://servidor/Publicador/listarListasPublicasDeClienteResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/listarListasPublicasDeCliente/Fault/ClienteInexistenteException")
    })
    public DataColeccionString listarListasPublicasDeCliente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws NoHaySuscripcionException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws TransicionSuscripcionInvalidaException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/cancelarSuscripcionRequest", output = "http://servidor/Publicador/cancelarSuscripcionResponse", fault = {
        @FaultAction(className = NoHaySuscripcionException_Exception.class, value = "http://servidor/Publicador/cancelarSuscripcion/Fault/NoHaySuscripcionException"),
        @FaultAction(className = TransicionSuscripcionInvalidaException_Exception.class, value = "http://servidor/Publicador/cancelarSuscripcion/Fault/TransicionSuscripcionInvalidaException"),
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/cancelarSuscripcion/Fault/ClienteInexistenteException")
    })
    public void cancelarSuscripcion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception, NoHaySuscripcionException_Exception, TransicionSuscripcionInvalidaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataColeccionSuscripcion
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarSuscripcionesClienteRequest", output = "http://servidor/Publicador/listarSuscripcionesClienteResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/listarSuscripcionesCliente/Fault/ClienteInexistenteException")
    })
    public DataColeccionSuscripcion listarSuscripcionesCliente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws NoHaySuscripcionException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws TransicionSuscripcionInvalidaException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/renovarSuscripcionRequest", output = "http://servidor/Publicador/renovarSuscripcionResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/renovarSuscripcion/Fault/ClienteInexistenteException"),
        @FaultAction(className = TransicionSuscripcionInvalidaException_Exception.class, value = "http://servidor/Publicador/renovarSuscripcion/Fault/TransicionSuscripcionInvalidaException"),
        @FaultAction(className = NoHaySuscripcionException_Exception.class, value = "http://servidor/Publicador/renovarSuscripcion/Fault/NoHaySuscripcionException")
    })
    public void renovarSuscripcion(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception, NoHaySuscripcionException_Exception, TransicionSuscripcionInvalidaException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/existeUsuarioCorreoRequest", output = "http://servidor/Publicador/existeUsuarioCorreoResponse")
    public boolean existeUsuarioCorreo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/existeUsuarioNickRequest", output = "http://servidor/Publicador/existeUsuarioNickResponse")
    public boolean existeUsuarioNick(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esFavoritoParticularRequest", output = "http://servidor/Publicador/esFavoritoParticularResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoParticular/Fault/ClienteInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoParticular/Fault/AlbumInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoParticular/Fault/ArtistaInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoParticular/Fault/ListaInexistenteException")
    })
    public boolean esFavoritoParticular(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.BeanConsultaGenero
     * @throws GeneroInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaGeneroRequest", output = "http://servidor/Publicador/consultaGeneroResponse", fault = {
        @FaultAction(className = GeneroInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaGenero/Fault/GeneroInexistenteException")
    })
    public BeanConsultaGenero consultaGenero(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws GeneroInexistenteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/favoritearTemaRequest", output = "http://servidor/Publicador/favoritearTemaResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearTema/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/favoritearTema/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearTema/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearTema/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearTema/Fault/AlbumInexistenteException")
    })
    public void favoritearTema(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/favoritearDefectoRequest", output = "http://servidor/Publicador/favoritearDefectoResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearDefecto/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/favoritearDefecto/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearDefecto/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearDefecto/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearDefecto/Fault/AlbumInexistenteException")
    })
    public void favoritearDefecto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/favoritearParticularRequest", output = "http://servidor/Publicador/favoritearParticularResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearParticular/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/favoritearParticular/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearParticular/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearParticular/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearParticular/Fault/AlbumInexistenteException")
    })
    public void favoritearParticular(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/favoritearAlbumRequest", output = "http://servidor/Publicador/favoritearAlbumResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearAlbum/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/favoritearAlbum/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearAlbum/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearAlbum/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/favoritearAlbum/Fault/AlbumInexistenteException")
    })
    public void favoritearAlbum(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/desFavoritearTemaRequest", output = "http://servidor/Publicador/desFavoritearTemaResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearTema/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/desFavoritearTema/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearTema/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearTema/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearTema/Fault/AlbumInexistenteException")
    })
    public void desFavoritearTema(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/desFavoritearDefectoRequest", output = "http://servidor/Publicador/desFavoritearDefectoResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearDefecto/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/desFavoritearDefecto/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearDefecto/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearDefecto/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearDefecto/Fault/AlbumInexistenteException")
    })
    public void desFavoritearDefecto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/desFavoritearParticularRequest", output = "http://servidor/Publicador/desFavoritearParticularResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearParticular/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/desFavoritearParticular/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearParticular/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearParticular/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearParticular/Fault/AlbumInexistenteException")
    })
    public void desFavoritearParticular(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     * @throws FavoritoRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/desFavoritearAlbumRequest", output = "http://servidor/Publicador/desFavoritearAlbumResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearAlbum/Fault/ClienteInexistenteException"),
        @FaultAction(className = FavoritoRepetidoException_Exception.class, value = "http://servidor/Publicador/desFavoritearAlbum/Fault/FavoritoRepetidoException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearAlbum/Fault/ListaInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearAlbum/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/desFavoritearAlbum/Fault/AlbumInexistenteException")
    })
    public void desFavoritearAlbum(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, FavoritoRepetidoException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/darBajaArtistaRequest", output = "http://servidor/Publicador/darBajaArtistaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/darBajaArtista/Fault/ArtistaInexistenteException")
    })
    public void darBajaArtista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/albumTempTieneTemaRequest", output = "http://servidor/Publicador/albumTempTieneTemaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/albumTempTieneTema/Fault/ArtistaInexistenteException")
    })
    public boolean albumTempTieneTema(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws CorreoRepetidoException_Exception
     * @throws FormatoIncorrectoException_Exception
     * @throws NickRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/altaClienteConImagenRequest", output = "http://servidor/Publicador/altaClienteConImagenResponse", fault = {
        @FaultAction(className = NickRepetidoException_Exception.class, value = "http://servidor/Publicador/altaClienteConImagen/Fault/NickRepetidoException"),
        @FaultAction(className = CorreoRepetidoException_Exception.class, value = "http://servidor/Publicador/altaClienteConImagen/Fault/CorreoRepetidoException"),
        @FaultAction(className = FormatoIncorrectoException_Exception.class, value = "http://servidor/Publicador/altaClienteConImagen/Fault/FormatoIncorrectoException")
    })
    public void altaClienteConImagen(
        @WebParam(name = "arg0", partName = "arg0")
        DataCliente arg0,
        @WebParam(name = "arg1", partName = "arg1")
        byte[] arg1)
        throws CorreoRepetidoException_Exception, FormatoIncorrectoException_Exception, NickRepetidoException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg4
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws TemaRepetidoException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/agregarTemaWebxAlbumRequest", output = "http://servidor/Publicador/agregarTemaWebxAlbumResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/agregarTemaWebxAlbum/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/agregarTemaWebxAlbum/Fault/AlbumInexistenteException"),
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/agregarTemaWebxAlbum/Fault/ClienteInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/agregarTemaWebxAlbum/Fault/ListaInexistenteException"),
        @FaultAction(className = TemaRepetidoException_Exception.class, value = "http://servidor/Publicador/agregarTemaWebxAlbum/Fault/TemaRepetidoException")
    })
    public void agregarTemaWebxAlbum(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3,
        @WebParam(name = "arg4", partName = "arg4")
        String arg4)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, ListaInexistenteException_Exception, TemaRepetidoException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaFechaVencimientoSuscripcionVigenteRequest", output = "http://servidor/Publicador/consultaFechaVencimientoSuscripcionVigenteResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaFechaVencimientoSuscripcionVigente/Fault/ClienteInexistenteException")
    })
    public String consultaFechaVencimientoSuscripcionVigente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/registrarEscuchaRequest", output = "http://servidor/Publicador/registrarEscuchaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/registrarEscucha/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/registrarEscucha/Fault/AlbumInexistenteException")
    })
    public void registrarEscucha(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataUsuario
     * @throws UsuarioInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/buscarUsuarioRequest", output = "http://servidor/Publicador/buscarUsuarioResponse", fault = {
        @FaultAction(className = UsuarioInexistenteException_Exception.class, value = "http://servidor/Publicador/buscarUsuario/Fault/UsuarioInexistenteException")
    })
    public DataUsuario buscarUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns int
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaCantDescargasRequest", output = "http://servidor/Publicador/consultaCantDescargasResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaCantDescargas/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaCantDescargas/Fault/AlbumInexistenteException")
    })
    public int consultaCantDescargas(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     * @throws TemaTipoInvalidoException_Exception
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getAudioRequest", output = "http://servidor/Publicador/getAudioResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/getAudio/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/getAudio/Fault/AlbumInexistenteException"),
        @FaultAction(className = TemaTipoInvalidoException_Exception.class, value = "http://servidor/Publicador/getAudio/Fault/TemaTipoInvalidoException")
    })
    public byte[] getAudio(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, TemaTipoInvalidoException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionRanking
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/darRankingRequest", output = "http://servidor/Publicador/darRankingResponse")
    public DataColeccionRanking darRanking();

    /**
     * 
     * @return
     *     returns servidor.DataColeccionTemas
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/sugerirRequest", output = "http://servidor/Publicador/sugerirResponse")
    public DataColeccionTemas sugerir();

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws ListaRepetidaException_Exception
     * @throws CampoVacioException_Exception
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/altaListaParticularConImagenRequest", output = "http://servidor/Publicador/altaListaParticularConImagenResponse", fault = {
        @FaultAction(className = ListaRepetidaException_Exception.class, value = "http://servidor/Publicador/altaListaParticularConImagen/Fault/ListaRepetidaException"),
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/altaListaParticularConImagen/Fault/ClienteInexistenteException"),
        @FaultAction(className = CampoVacioException_Exception.class, value = "http://servidor/Publicador/altaListaParticularConImagen/Fault/CampoVacioException")
    })
    public void altaListaParticularConImagen(
        @WebParam(name = "arg0", partName = "arg0")
        DataParticular arg0,
        @WebParam(name = "arg1", partName = "arg1")
        byte[] arg1)
        throws CampoVacioException_Exception, ClienteInexistenteException_Exception, ListaRepetidaException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     */
    @WebMethod(operationName = "RegistrarAcceso")
    @Action(input = "http://servidor/Publicador/RegistrarAccesoRequest", output = "http://servidor/Publicador/RegistrarAccesoResponse")
    public void registrarAcceso(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns servidor.DataTema
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaTemaRequest", output = "http://servidor/Publicador/consultaTemaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaTema/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaTema/Fault/AlbumInexistenteException")
    })
    public DataTema consultaTema(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esAlbumDeArtistaRequest", output = "http://servidor/Publicador/esAlbumDeArtistaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/esAlbumDeArtista/Fault/ArtistaInexistenteException")
    })
    public boolean esAlbumDeArtista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/addAlbumTempRequest", output = "http://servidor/Publicador/addAlbumTempResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/addAlbumTemp/Fault/ArtistaInexistenteException")
    })
    public void addAlbumTemp(
        @WebParam(name = "arg0", partName = "arg0")
        DataAlbumExt arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/addAlbumTempConImagenRequest", output = "http://servidor/Publicador/addAlbumTempConImagenResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/addAlbumTempConImagen/Fault/ArtistaInexistenteException")
    })
    public void addAlbumTempConImagen(
        @WebParam(name = "arg0", partName = "arg0")
        DataAlbumExt arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        byte[] arg2)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @return
     *     returns servidor.DataColeccionGenerosStrfy
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getGenerosStringifiedRequest", output = "http://servidor/Publicador/getGenerosStringifiedResponse")
    public DataColeccionGenerosStrfy getGenerosStringified();

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listaEsPrivadaRequest", output = "http://servidor/Publicador/listaEsPrivadaResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/listaEsPrivada/Fault/ClienteInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/listaEsPrivada/Fault/ListaInexistenteException")
    })
    public boolean listaEsPrivada(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ClienteInexistenteException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataSuscripcion
     * @throws NoHaySuscripcionException_Exception
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/obtenerSuscripcionActualRequest", output = "http://servidor/Publicador/obtenerSuscripcionActualResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/obtenerSuscripcionActual/Fault/ClienteInexistenteException"),
        @FaultAction(className = NoHaySuscripcionException_Exception.class, value = "http://servidor/Publicador/obtenerSuscripcionActual/Fault/NoHaySuscripcionException")
    })
    public DataSuscripcion obtenerSuscripcionActual(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception, NoHaySuscripcionException_Exception
    ;

    /**
     * 
     * @param arg0
     * @throws TemaTipoInvalidoException_Exception
     * @throws NumeroTemaInvalidoException_Exception
     * @throws ArtistaInexistenteException_Exception
     * @throws DuracionInvalidaException_Exception
     * @throws CampoVacioException_Exception
     * @throws AlbumRepetidoException_Exception
     * @throws GeneroInexistenteException_Exception
     * @throws TemaRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/aceptarAltaAlbumRequest", output = "http://servidor/Publicador/aceptarAltaAlbumResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumRepetidoException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/AlbumRepetidoException"),
        @FaultAction(className = GeneroInexistenteException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/GeneroInexistenteException"),
        @FaultAction(className = DuracionInvalidaException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/DuracionInvalidaException"),
        @FaultAction(className = NumeroTemaInvalidoException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/NumeroTemaInvalidoException"),
        @FaultAction(className = TemaRepetidoException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/TemaRepetidoException"),
        @FaultAction(className = CampoVacioException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/CampoVacioException"),
        @FaultAction(className = TemaTipoInvalidoException_Exception.class, value = "http://servidor/Publicador/aceptarAltaAlbum/Fault/TemaTipoInvalidoException")
    })
    public void aceptarAltaAlbum(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws AlbumRepetidoException_Exception, ArtistaInexistenteException_Exception, CampoVacioException_Exception, DuracionInvalidaException_Exception, GeneroInexistenteException_Exception, NumeroTemaInvalidoException_Exception, TemaRepetidoException_Exception, TemaTipoInvalidoException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/deleteTemaAlbumTempRequest", output = "http://servidor/Publicador/deleteTemaAlbumTempResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/deleteTemaAlbumTemp/Fault/ArtistaInexistenteException")
    })
    public void deleteTemaAlbumTemp(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/contratarSuscripcionRequest", output = "http://servidor/Publicador/contratarSuscripcionResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/contratarSuscripcion/Fault/ClienteInexistenteException")
    })
    public boolean contratarSuscripcion(
        @WebParam(name = "arg0", partName = "arg0")
        TipoSuscripcion arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataClienteExt
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaClienteRequest", output = "http://servidor/Publicador/consultaClienteResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaCliente/Fault/ClienteInexistenteException")
    })
    public DataClienteExt consultaCliente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws SeguidorInexistenteException_Exception
     * @throws SeguidoInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/dejarDeSeguirRequest", output = "http://servidor/Publicador/dejarDeSeguirResponse", fault = {
        @FaultAction(className = SeguidoInexistenteException_Exception.class, value = "http://servidor/Publicador/dejarDeSeguir/Fault/SeguidoInexistenteException"),
        @FaultAction(className = SeguidorInexistenteException_Exception.class, value = "http://servidor/Publicador/dejarDeSeguir/Fault/SeguidorInexistenteException")
    })
    public void dejarDeSeguir(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws SeguidoInexistenteException_Exception, SeguidorInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns servidor.DataLista
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/darInfoParticularRequest", output = "http://servidor/Publicador/darInfoParticularResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/darInfoParticular/Fault/ClienteInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/darInfoParticular/Fault/ListaInexistenteException")
    })
    public DataLista darInfoParticular(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ClienteInexistenteException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws UsuarioInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esClienteRequest", output = "http://servidor/Publicador/esClienteResponse", fault = {
        @FaultAction(className = UsuarioInexistenteException_Exception.class, value = "http://servidor/Publicador/esCliente/Fault/UsuarioInexistenteException")
    })
    public boolean esCliente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws UsuarioInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/checkPasswordRequest", output = "http://servidor/Publicador/checkPasswordResponse", fault = {
        @FaultAction(className = UsuarioInexistenteException_Exception.class, value = "http://servidor/Publicador/checkPassword/Fault/UsuarioInexistenteException")
    })
    public boolean checkPassword(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws UsuarioInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/tieneSuscripcionVigenteRequest", output = "http://servidor/Publicador/tieneSuscripcionVigenteResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/tieneSuscripcionVigente/Fault/ClienteInexistenteException")
    })
    public boolean tieneSuscripcionVigente(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/registrarDescargaRequest", output = "http://servidor/Publicador/registrarDescargaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/registrarDescarga/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/registrarDescarga/Fault/AlbumInexistenteException")
    })
    public void registrarDescarga(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg3
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esFavoritoTemaRequest", output = "http://servidor/Publicador/esFavoritoTemaResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoTema/Fault/ClienteInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoTema/Fault/AlbumInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoTema/Fault/ArtistaInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoTema/Fault/ListaInexistenteException")
    })
    public boolean esFavoritoTema(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2,
        @WebParam(name = "arg3", partName = "arg3")
        String arg3)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esFavoritoDefectoRequest", output = "http://servidor/Publicador/esFavoritoDefectoResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoDefecto/Fault/ClienteInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoDefecto/Fault/AlbumInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoDefecto/Fault/ArtistaInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoDefecto/Fault/ListaInexistenteException")
    })
    public boolean esFavoritoDefecto(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.BeanBusqueda
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/buscarRequest", output = "http://servidor/Publicador/buscarResponse")
    public BeanBusqueda buscar(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     * @throws ClienteInexistenteException_Exception
     * @throws ListaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esFavoritoAlbumRequest", output = "http://servidor/Publicador/esFavoritoAlbumResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoAlbum/Fault/ClienteInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoAlbum/Fault/AlbumInexistenteException"),
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoAlbum/Fault/ArtistaInexistenteException"),
        @FaultAction(className = ListaInexistenteException_Exception.class, value = "http://servidor/Publicador/esFavoritoAlbum/Fault/ListaInexistenteException")
    })
    public boolean esFavoritoAlbum(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception, ClienteInexistenteException_Exception, ListaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns byte[]
     * @throws UsuarioInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getImageUsuarioRequest", output = "http://servidor/Publicador/getImageUsuarioResponse", fault = {
        @FaultAction(className = UsuarioInexistenteException_Exception.class, value = "http://servidor/Publicador/getImageUsuario/Fault/UsuarioInexistenteException")
    })
    public byte[] getImageUsuario(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws UsuarioInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getImageAlbumRequest", output = "http://servidor/Publicador/getImageAlbumResponse")
    public byte[] getImageAlbum(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns byte[]
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getImageListaRequest", output = "http://servidor/Publicador/getImageListaResponse")
    public byte[] getImageLista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1);

    /**
     * 
     * @param arg0
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/esArtistaRequest", output = "http://servidor/Publicador/esArtistaResponse")
    public boolean esArtista(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0);

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.BeanListarFavoritos
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/listarFavoritosRequest", output = "http://servidor/Publicador/listarFavoritosResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/listarFavoritos/Fault/ClienteInexistenteException")
    })
    public BeanListarFavoritos listarFavoritos(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns servidor.DataAlbumExt
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/getAlbumTempRequest", output = "http://servidor/Publicador/getAlbumTempResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/getAlbumTemp/Fault/ArtistaInexistenteException")
    })
    public DataAlbumExt getAlbumTemp(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/addTemaWebAlbumTempRequest", output = "http://servidor/Publicador/addTemaWebAlbumTempResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/addTemaWebAlbumTemp/Fault/ArtistaInexistenteException")
    })
    public void addTemaWebAlbumTemp(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        DataTemaWeb arg1)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @throws ArtistaInexistenteException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/addTemaArchivoAlbumTempRequest", output = "http://servidor/Publicador/addTemaArchivoAlbumTempResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/addTemaArchivoAlbumTemp/Fault/ArtistaInexistenteException")
    })
    public void addTemaArchivoAlbumTemp(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        DataTemaArchivo arg1,
        @WebParam(name = "arg2", partName = "arg2")
        byte[] arg2)
        throws ArtistaInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @return
     *     returns boolean
     * @throws ClienteInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/siguiendoRequest", output = "http://servidor/Publicador/siguiendoResponse", fault = {
        @FaultAction(className = ClienteInexistenteException_Exception.class, value = "http://servidor/Publicador/siguiendo/Fault/ClienteInexistenteException")
    })
    public boolean siguiendo(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1)
        throws ClienteInexistenteException_Exception
    ;

    /**
     * 
     * @param arg1
     * @param arg0
     * @throws CorreoRepetidoException_Exception
     * @throws FormatoIncorrectoException_Exception
     * @throws NickRepetidoException_Exception
     */
    @WebMethod
    @Action(input = "http://servidor/Publicador/altaArtistaConImagenRequest", output = "http://servidor/Publicador/altaArtistaConImagenResponse", fault = {
        @FaultAction(className = NickRepetidoException_Exception.class, value = "http://servidor/Publicador/altaArtistaConImagen/Fault/NickRepetidoException"),
        @FaultAction(className = CorreoRepetidoException_Exception.class, value = "http://servidor/Publicador/altaArtistaConImagen/Fault/CorreoRepetidoException"),
        @FaultAction(className = FormatoIncorrectoException_Exception.class, value = "http://servidor/Publicador/altaArtistaConImagen/Fault/FormatoIncorrectoException")
    })
    public void altaArtistaConImagen(
        @WebParam(name = "arg0", partName = "arg0")
        DataArtista arg0,
        @WebParam(name = "arg1", partName = "arg1")
        byte[] arg1)
        throws CorreoRepetidoException_Exception, FormatoIncorrectoException_Exception, NickRepetidoException_Exception
    ;

    /**
     * 
     * @param arg2
     * @param arg1
     * @param arg0
     * @return
     *     returns java.lang.String
     * @throws ArtistaInexistenteException_Exception
     * @throws AlbumInexistenteException_Exception
     */
    @WebMethod
    @WebResult(partName = "return")
    @Action(input = "http://servidor/Publicador/consultaURLTemaRequest", output = "http://servidor/Publicador/consultaURLTemaResponse", fault = {
        @FaultAction(className = ArtistaInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaURLTema/Fault/ArtistaInexistenteException"),
        @FaultAction(className = AlbumInexistenteException_Exception.class, value = "http://servidor/Publicador/consultaURLTema/Fault/AlbumInexistenteException")
    })
    public String consultaURLTema(
        @WebParam(name = "arg0", partName = "arg0")
        String arg0,
        @WebParam(name = "arg1", partName = "arg1")
        String arg1,
        @WebParam(name = "arg2", partName = "arg2")
        String arg2)
        throws AlbumInexistenteException_Exception, ArtistaInexistenteException_Exception
    ;

}
