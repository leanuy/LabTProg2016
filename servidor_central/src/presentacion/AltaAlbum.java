package presentacion;

import espotify.Fabrica;
import espotify.datatypes.DataAlbumExt;
import espotify.datatypes.DataGenero;
import espotify.datatypes.DataTema;
import espotify.datatypes.DataTemaArchivo;
import espotify.datatypes.DataTemaWeb;
import espotify.excepciones.AlbumRepetidoException;
import espotify.excepciones.ArtistaInexistenteException;
import espotify.excepciones.CampoVacioException;
import espotify.excepciones.DuracionInvalidaException;
import espotify.excepciones.GeneroInexistenteException;
import espotify.excepciones.NumeroTemaInvalidoException;
import espotify.excepciones.TemaRepetidoException;
import espotify.excepciones.TemaTipoInvalidoException;
import espotify.interfaces.IAltaAlbum;

import java.awt.image.BufferedImage;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;

public class AltaAlbum extends javax.swing.JInternalFrame {
    
    private DefaultListModel modeloTemas; 
    private DefaultListModel modeloArtistas;
    private DefaultTreeModel modeloTree;
    private String pathAImagen;
    private boolean primeraVez;
    private static int numeroTema;
    private static ArrayList<DataTema> listaTemas;
    
    private static boolean web;
    private static String url;
    private static File file;
    private static BufferedInputStream buf;
    private static String nombre;
    private static int duracion;
    private BufferedImage img = null;
    private String ArtistSelected;
    
    
    private static List<String> temasYaIngresados;
    private static String nombreAnterior;
    private static boolean nombreRepetido;
    private static boolean entrar;
    
    IAltaAlbum inter =  Fabrica.getIAltaAlbum();                 

    public AltaAlbum() {
        initComponents();
        modeloTemas = new DefaultListModel();
        modeloArtistas = new DefaultListModel();
        ListaTemas.setModel(modeloTemas);
        ListaArtistas.setModel(modeloArtistas);
        ListaArtistas.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        buttonConfirmarALtaAlbum.setEnabled(false);
        PanelSDatosAlbum.setEnabled(true);
        primeraVez = true;
        numeroTema = 1;
        listaTemas = new ArrayList();
        web = false;
        url = "";
        file = null;
        nombre = "";
        duracion = 0;
        img = null;
        ArbolGeneros.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        nombreRepetido = false;
        nombreAnterior = "";
        temasYaIngresados = null;
        temasYaIngresados = new ArrayList();
        
        //cargar Generos
        DataGenero generoBase = null;
        generoBase = inter.listarGeneros();
        DefaultMutableTreeNode raiz = new DefaultMutableTreeNode(generoBase.getNombre());
        modeloTree  = new DefaultTreeModel(raiz);
        ArbolGeneros.setModel(modeloTree);
        cargarArbol(generoBase,raiz);
        expandAllNodes(ArbolGeneros, 0, ArbolGeneros.getRowCount());
        
        //cargar Artistas
        List<String> artists = inter.listarArtistas();
        for (String s: artists) {
            modeloArtistas.addElement(s);
        }
    }
    
    private void expandAllNodes(JTree tree, int startingIndex, int rowCount) {
        for (int i = startingIndex; i < rowCount; ++i) {
            tree.expandRow(i);
        }

        if (tree.getRowCount() != rowCount) {
            expandAllNodes(tree, rowCount, tree.getRowCount());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelBusquedaDeArtista = new javax.swing.JPanel();
        LabelnombreArtista = new javax.swing.JLabel();
        buttonSeleccionar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ListaArtistas = new javax.swing.JList<>();
        PanelSDatosAlbum = new javax.swing.JPanel();
        LabelGeneros = new javax.swing.JLabel();
        buttonAgregarTema = new javax.swing.JButton();
        LabelNombreALbum = new javax.swing.JLabel();
        nombreAlbum = new javax.swing.JTextField();
        LabelAnioCreacion = new javax.swing.JLabel();
        anioDeCreacion = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListaTemas = new javax.swing.JList<>();
        LabelTemas = new javax.swing.JLabel();
        buttonAgregarImagen = new javax.swing.JButton();
        pathALaImagen = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonConfirmarALtaAlbum = new javax.swing.JButton();
        buttonCancelarAltaAlbum = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        ArbolGeneros = new javax.swing.JTree();

        setClosable(true);
        setTitle("Alta Album");

        LabelnombreArtista.setText("Artistas");

        buttonSeleccionar.setText("Seleccionar");
        buttonSeleccionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSeleccionarActionPerformed(evt);
            }
        });

        ListaArtistas.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(ListaArtistas);

        javax.swing.GroupLayout PanelBusquedaDeArtistaLayout = new javax.swing.GroupLayout(PanelBusquedaDeArtista);
        PanelBusquedaDeArtista.setLayout(PanelBusquedaDeArtistaLayout);
        PanelBusquedaDeArtistaLayout.setHorizontalGroup(
            PanelBusquedaDeArtistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBusquedaDeArtistaLayout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(LabelnombreArtista)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSeleccionar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelBusquedaDeArtistaLayout.setVerticalGroup(
            PanelBusquedaDeArtistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelBusquedaDeArtistaLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(PanelBusquedaDeArtistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(PanelBusquedaDeArtistaLayout.createSequentialGroup()
                        .addGroup(PanelBusquedaDeArtistaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(buttonSeleccionar)
                            .addComponent(LabelnombreArtista))
                        .addGap(0, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );

        LabelGeneros.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        LabelGeneros.setText("Generos");

        buttonAgregarTema.setText("Agregar Tema");
        buttonAgregarTema.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarTemaActionPerformed(evt);
            }
        });

        LabelNombreALbum.setText("Nombre del Album");

        LabelAnioCreacion.setText("AÃ±o de creacion");

        jLabel1.setText("(Seleccione los generos del arbol)");

        jScrollPane1.setViewportView(ListaTemas);

        LabelTemas.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        LabelTemas.setText("Temas");

        buttonAgregarImagen.setText("Agregar Imagen");
        buttonAgregarImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAgregarImagenActionPerformed(evt);
            }
        });

        jLabel2.setText("(solo archivos .jpg o .png)");

        buttonConfirmarALtaAlbum.setText("Confirmar Alta Album");
        buttonConfirmarALtaAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonConfirmarALtaAlbumActionPerformed(evt);
            }
        });

        buttonCancelarAltaAlbum.setText("Cancelar Alta");
        buttonCancelarAltaAlbum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonCancelarAltaAlbumActionPerformed(evt);
            }
        });

        ArbolGeneros.setModel(null);
        jScrollPane2.setViewportView(ArbolGeneros);

        javax.swing.GroupLayout PanelSDatosAlbumLayout = new javax.swing.GroupLayout(PanelSDatosAlbum);
        PanelSDatosAlbum.setLayout(PanelSDatosAlbumLayout);
        PanelSDatosAlbumLayout.setHorizontalGroup(
            PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LabelTemas)
                            .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                                    .addComponent(LabelGeneros)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel1))
                                .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                                            .addGap(77, 77, 77)
                                            .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(buttonAgregarTema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(buttonConfirmarALtaAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(buttonCancelarAltaAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addComponent(jLabel2)
                    .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(LabelAnioCreacion)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(anioDeCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                            .addComponent(LabelNombreALbum)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(nombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                            .addComponent(buttonAgregarImagen)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pathALaImagen))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelSDatosAlbumLayout.setVerticalGroup(
            PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelNombreALbum)
                    .addComponent(nombreAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelGeneros)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelSDatosAlbumLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buttonAgregarTema, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonConfirmarALtaAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonCancelarAltaAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(PanelSDatosAlbumLayout.createSequentialGroup()
                        .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(LabelAnioCreacion)
                            .addComponent(anioDeCreacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(PanelSDatosAlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonAgregarImagen)
                            .addComponent(pathALaImagen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(7, 7, 7)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LabelTemas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelBusquedaDeArtista, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(PanelSDatosAlbum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(PanelBusquedaDeArtista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelSDatosAlbum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSeleccionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSeleccionarActionPerformed
        int seleccionado = ListaArtistas.getSelectedIndex();
        if(seleccionado == -1){
            JOptionPane.showMessageDialog(this, "Debe seleccionar un artista", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        ArtistSelected = (String)modeloArtistas.getElementAt(seleccionado);
        buttonSeleccionar.setEnabled(false);
        buttonConfirmarALtaAlbum.setEnabled(true);
    }//GEN-LAST:event_buttonSeleccionarActionPerformed

    private void cargarArbol(DataGenero dataGenero, DefaultMutableTreeNode padre){
        int idx = 0;
        for(DataGenero d: dataGenero.getHijos()){
            DefaultMutableTreeNode nodito = new DefaultMutableTreeNode(d.getNombre());
            modeloTree.insertNodeInto(nodito,padre,idx);
            idx++;
            cargarArbol(d,nodito);
        }
    
    }
    
    private void buttonAgregarTemaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarTemaActionPerformed
        if (!nombreAlbum.getText().isEmpty()) {
            nombreAlbum.setEnabled(false);
            DialogoIngresoTema ingTema = new DialogoIngresoTema(null,"Ingrese el Tema",true); 
            ingTema.setLocationRelativeTo(this);

            ingTema.setVisible(true);

            if (entrar) {
                if (nombreRepetido) {
                    JOptionPane.showMessageDialog(this, "Nombre de tema Repetido", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                } else {
                    if (web) {
                        DataTemaWeb dTema = new DataTemaWeb(url,nombre,duracion,numeroTema,ArtistSelected, nombreAlbum.getText());
                        listaTemas.add(dTema);
                        modeloTemas.addElement(numeroTema + " - " + dTema.getNombre());
                    } else {
                        
                        DataTemaArchivo dta = new DataTemaArchivo(buf,nombre,duracion,numeroTema,ArtistSelected,nombreAlbum.getText());
                        listaTemas.add(dta);
                        modeloTemas.addElement(numeroTema + " - " + dta.getNombre());
                    }
                    numeroTema++;
                    temasYaIngresados.add(nombre);
                    nombreAnterior = nombre;
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Debe Ingresar el nombre del Album", "Atencion!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_buttonAgregarTemaActionPerformed

    private void buttonAgregarImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAgregarImagenActionPerformed
        // TODO abrir un file chooser y que file por tipo de archivo. solo jpg o png. mostrar path luego en textfield editable
        // avisar y no seleccionar si archivo no tiene la extension deseada.
        JFileChooser fChooser = new JFileChooser();
        this.getContentPane().add(fChooser);
        fChooser.setVisible(true);
        
        int selected = fChooser.showDialog(this, "Seleccionar");
        if (selected == JFileChooser.APPROVE_OPTION) {
            File file = fChooser.getSelectedFile();
            try {
                pathAImagen = file.getCanonicalPath();
                String ext = getExtension(file);
                if(!"jpg".equals(ext) && !"png".equals(ext) && !"jpeg".equals(ext)){
                    JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen formato .jpg o .png", "Error", JOptionPane.ERROR_MESSAGE);
                    fChooser.setVisible(false);
                    return;
                }
                img = ImageIO.read(file);
                pathALaImagen.setText(pathAImagen);
                URL url = new URL(pathAImagen);
                InputStream input = url.openStream();
                buf = new BufferedInputStream(input);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "La ruta al archivo no es correcta", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        fChooser.setVisible(false);    
    }//GEN-LAST:event_buttonAgregarImagenActionPerformed

    private void buttonConfirmarALtaAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonConfirmarALtaAlbumActionPerformed
        String ext = pathALaImagen.getText();
        if (!ext.equals("") && !getExtensionDeString(ext)) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar una imagen formato .jpg o .png", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!ext.equals("") && !(img instanceof BufferedImage)) {
            JOptionPane.showMessageDialog(this,
                    "Imagen invalida",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if ("".equals(nombreAlbum.getText())) {
            JOptionPane.showMessageDialog(this,
                    "Debe ingresar un nombre al album",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (listaTemas.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Debe ingresar al menos un tema al album",
                    "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int year;
        try {
            year = Integer.parseInt(anioDeCreacion.getText());
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "AÃ±o de creacion invalido.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        ArrayList<String> genders = new ArrayList();
        TreePath[] path = ArbolGeneros.getSelectionPaths();
        if(path == null){
            JOptionPane.showMessageDialog(this, "Debe seleccionar al menos un genero", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (TreePath pat : path) {
            genders.add(pat.getLastPathComponent().toString());
        }
        
        
        DataAlbumExt nuevoAlbum = new DataAlbumExt(listaTemas,
                nombreAlbum.getText(),year,genders,img,ArtistSelected);
        
        try {
            inter.altaAlbum(nuevoAlbum);
        } catch(AlbumRepetidoException e){
            JOptionPane.showMessageDialog(this, "El artista que ha ingresado ya tiene un album con ese nombre. Por favor seleccione un nombre distinto.", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } catch(GeneroInexistenteException e){
            JOptionPane.showMessageDialog(this, "Uno de los gÃ©neros ingresados no existe y por lo tanto no se puede agregar al album.", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } catch(DuracionInvalidaException e){
            JOptionPane.showMessageDialog(this, "Uno de los temas ingresados no tiene una duraciÃ³n vÃ¡lida.", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } catch(NumeroTemaInvalidoException e){
            JOptionPane.showMessageDialog(this, "Uno de los temas ingresados no tiene un nÃºmero vÃ¡lido.", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } catch(TemaRepetidoException e){
            JOptionPane.showMessageDialog(this, "Se ingresaron dos temas con el mismo nombre. El nombre de tema debe ser Ãºnico.", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } catch (CampoVacioException ex) {
            JOptionPane.showMessageDialog(this, "CAmpo vacio.", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } catch (TemaTipoInvalidoException ex) {
            JOptionPane.showMessageDialog(this, "Tipo de Tema Invalido", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } catch (ArtistaInexistenteException ex) {
            JOptionPane.showMessageDialog(this, "Artista inexistente", "Error", JOptionPane.ERROR_MESSAGE);
            this.dispose();
            return;
        } 
        JOptionPane.showMessageDialog(this, "Alta Album exitosa", "Felicitaciones", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }//GEN-LAST:event_buttonConfirmarALtaAlbumActionPerformed

    private void buttonCancelarAltaAlbumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelarAltaAlbumActionPerformed
        this.dispose();
    }//GEN-LAST:event_buttonCancelarAltaAlbumActionPerformed
    
    public static void cargarTema(boolean webx,String urlx,File filex,String nombrex, int duracionx, boolean entra){
        entrar = entra;
        web = webx;
        url = urlx;
        file = filex;
        nombreRepetido = false;
        duracion = duracionx;
        for(String s: temasYaIngresados){
            if(s.equals(nombrex)){
                nombreRepetido = true;
                return;
            }
        }
        nombre = nombrex;
    }

    private String getExtension(File file) {
        String ext = null;
        String nomArchivo = file.getName();
        int idx = nomArchivo.lastIndexOf('.');
        if (idx > 0 &&  idx < nomArchivo.length() - 1) {
            ext = nomArchivo.substring(idx+1).toLowerCase();
        }
        return ext;
    }
    
    private boolean getExtensionDeString(String str) {
        boolean ext = false;
        int idx = str.lastIndexOf('.');
        if (idx > 0 &&  idx < str.length() - 1) {
            ext = "jpg".equals(str.substring(idx+1).toLowerCase()) || "png".equals(str.substring(idx+1).toLowerCase()) || "jpeg".equals(str.substring(idx+1).toLowerCase());
        }
        return ext;
    }
           
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTree ArbolGeneros;
    private javax.swing.JLabel LabelAnioCreacion;
    private javax.swing.JLabel LabelGeneros;
    private javax.swing.JLabel LabelNombreALbum;
    private javax.swing.JLabel LabelTemas;
    private javax.swing.JLabel LabelnombreArtista;
    private javax.swing.JList<String> ListaArtistas;
    private javax.swing.JList<String> ListaTemas;
    private javax.swing.JPanel PanelBusquedaDeArtista;
    private javax.swing.JPanel PanelSDatosAlbum;
    private javax.swing.JTextField anioDeCreacion;
    private javax.swing.JButton buttonAgregarImagen;
    private javax.swing.JButton buttonAgregarTema;
    private javax.swing.JButton buttonCancelarAltaAlbum;
    private javax.swing.JButton buttonConfirmarALtaAlbum;
    private javax.swing.JButton buttonSeleccionar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField nombreAlbum;
    private javax.swing.JTextField pathALaImagen;
    // End of variables declaration//GEN-END:variables
}
